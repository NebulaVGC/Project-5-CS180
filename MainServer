import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

/**
 * CHALLENGE 11
 * <p>
 * Create a button pressing game
 *
 * @author Shih Kuan Chou, CS 180 - L09
 * @version Apr 1, 2022
 */

public class MainServer {

    public static void main(String[] args) {
        checkFile();
        int i = 0;
        ArrayList<String> teacherAccountStore = new ArrayList<>();
        ArrayList<String> teacherPasswordStore = new ArrayList<>();
        ArrayList<String> studentAccountStore = new ArrayList<>();
        ArrayList<String> studentPasswordStore = new ArrayList<>();
        ArrayList<String> listOfCompletedQuizzes = new ArrayList<>();

        while (i == 0) {
            try {

                ServerSocket serverSocket = new ServerSocket(4242);

                Socket socket = serverSocket.accept();

                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                PrintWriter writer = new PrintWriter(socket.getOutputStream());

                writer.write(String.valueOf(teacherAccountStore.size()));
                writer.println();
                writer.flush();
                for (int k = 0; k < teacherAccountStore.size(); k++) {
                    writer.write(String.valueOf(teacherAccountStore.get(k)));
                    writer.println();
                    writer.flush();
                }
                writer.write(String.valueOf(teacherPasswordStore.size()));
                writer.println();
                writer.flush();
                for (int k = 0; k < teacherPasswordStore.size(); k++) {
                    writer.write(String.valueOf(teacherPasswordStore.get(k)));
                    writer.println();
                    writer.flush();
                }
                writer.write(String.valueOf(studentAccountStore.size()));
                writer.println();
                writer.flush();
                for (int k = 0; k < studentAccountStore.size(); k++) {
                    writer.write(String.valueOf(studentAccountStore.get(k)));
                    writer.println();
                    writer.flush();
                }
                writer.write(String.valueOf(studentPasswordStore.size()));
                writer.println();
                writer.flush();
                for (int k = 0; k < studentPasswordStore.size(); k++) {
                    writer.write(String.valueOf(studentPasswordStore.get(k)));
                    writer.println();
                    writer.flush();
                }

                String action = reader.readLine();
                if (action.equals("create")) {
                    String type = reader.readLine();
                    if (type.equals("teacher")) {
                        String username = reader.readLine();
                        String password = reader.readLine();
                        teacherAccountStore.add(username);
                        teacherPasswordStore.add(password);

                        File teacherAccount = new File("TeacherAccount.txt");
                        FileOutputStream fos = new FileOutputStream(teacherAccount, false);
                        PrintWriter pw = new PrintWriter(fos);
                        for (int j = 0; j < teacherAccountStore.size(); j++) {
                            pw.println(teacherAccountStore.get(j));
                        }
                        File teacherPassword = new File("TeacherPassword.txt");
                        FileOutputStream fos2 = new FileOutputStream(teacherPassword, false);
                        PrintWriter pw2 = new PrintWriter(fos2);
                        for (int j = 0; j < teacherPasswordStore.size(); j++) {
                            pw2.println(teacherPasswordStore.get(j));
                        }
                        pw.close();
                        pw2.close();
                    } else if (type.equals("student")) {
                        String username = reader.readLine();
                        String password = reader.readLine();
                        studentAccountStore.add(username);
                        studentPasswordStore.add(password);

                        File studentAccount = new File("StudentAccount.txt");
                        FileOutputStream fos = new FileOutputStream(studentAccount, false);
                        PrintWriter pw = new PrintWriter(fos);
                        for (int j = 0; j < studentAccountStore.size(); j++) {
                            pw.println(studentAccountStore.get(j));
                        }
                        File studentPassword = new File("StudentPassword.txt");
                        FileOutputStream fos2 = new FileOutputStream(studentPassword, false);
                        PrintWriter pw2 = new PrintWriter(fos2);
                        for (int j = 0; j < studentPasswordStore.size(); j++) {
                            pw2.println(studentPasswordStore.get(j));
                        }
                        pw.close();
                        pw2.close();
                    }
                } else if (action.equals("edit")) {
                    String type = reader.readLine();
                    if (type.equals("teacher")) {
                        String editUsername = reader.readLine();
                        String editPassword = reader.readLine();
                        String newUsername = reader.readLine();
                        String newPassword = reader.readLine();

                        editTeacherInformation(editUsername, editPassword, newUsername, newPassword);
                    } else if (type.equals("student")) {
                        String editUsername = reader.readLine();
                        String editPassword = reader.readLine();
                        String newUsername = reader.readLine();
                        String newPassword = reader.readLine();

                        editStudentInformation(editUsername, editPassword, newUsername, newPassword);
                    }

                } else if (action.equals("login")) {
                    String type = reader.readLine();
                    if (type.equals("teacher")) {
                        //run teacher
                        int choice = 0;
                        while (choice != 8) {
                            choice = Integer.parseInt(reader.readLine());
                            if (choice == 1) {
                                createCourse(reader, writer);
                            } else if (choice == 2) {
                                deleteCourse(reader, writer);
                            } else if (choice == 3) {
                                createQuiz();
                            } else if (choice == 4) {
                                editQuiz();
                            } else if (choice == 5) {
                                deleteQuiz();
                            } else if (choice == 6) {
                                viewSubmission();
                            } else if (choice == 7) {
                                gradeSubmission();
                            }
                        }

                    }
                    if (type.equals("student")) {
                        if (reader.readLine().equals("get teacher")) {
                            int sendSize = teacherAccountStore.size();
                            writer.write(sendSize);
                            writer.println();
                            writer.flush();
                            String teacherDropList = "";
                            for (int k = 0; k < teacherAccountStore.size(); k++) {
                                teacherDropList = teacherDropList + teacherAccountStore.get(k) + "\n";
                            }
                            teacherDropList = teacherDropList.substring(0, teacherDropList.length()-1);
                            writer.write(teacherDropList);
                        }
                        String addQuizComplete = reader.readLine();
                        if (addQuizComplete.equals("Add Completed Quiz")) {
                            String completedQuiz = "";
                            String newLine;
                            while ((newLine = reader.readLine()) != null) {
                                completedQuiz = completedQuiz + newLine + "\n";
                            }
                            listOfCompletedQuizzes.add(completedQuiz);
                        }
                    }
                }
            } catch (IOException e) {
                //e.printStackTrace();
            }
        }
    }


    private static void checkFile() {
        File tAccount = new File("TeacherAccount.txt");
        try {
            if (tAccount.exists()) {

            } else {
                tAccount.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        File tPassword = new File("TeacherPassword.txt");
        try {
            if (tPassword.exists()) {

            } else {
                tPassword.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        File sAccount = new File("StudentAccount.txt");
        try {
            if (sAccount.exists()) {

            } else {
                sAccount.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        File sPassword = new File("StudentPassword.txt");
        try {
            if (sPassword.exists()) {

            } else {
                sPassword.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static int editTeacherInformation(String editUsername, String editPassword, String newUsername, String newPassword) {
        ArrayList<String> accountList = new ArrayList<>();
        ArrayList<String> passwordList = new ArrayList<>();
        int status = 0;
        try {
            File f = new File("TeacherAccount.txt");
            FileReader fr = new FileReader(f);
            BufferedReader bfr = new BufferedReader(fr);
            String line = bfr.readLine();
            while (line != null) {
                accountList.add(line);
                line = bfr.readLine();
            }
            bfr.close();

            File f2 = new File("TeacherPassword.txt");
            FileReader fr2 = new FileReader(f2);
            BufferedReader bfr2 = new BufferedReader(fr2);
            String line2 = bfr2.readLine();

            while (line2 != null) {
                passwordList.add(line2);
                line2 = bfr2.readLine();
            }
            bfr2.close();

            accountList.set(accountList.indexOf(editUsername), newUsername);
            passwordList.set(passwordList.indexOf(editPassword), newPassword);

            File teacherAccountFile = new File("TeacherAccount.txt");
            FileOutputStream fos = new FileOutputStream(teacherAccountFile,
                    false);
            PrintWriter pw = new PrintWriter(fos);
            for (int i = 0; i < accountList.size(); i++) {
                pw.println(accountList.get(i));
            }
            pw.close();

            File teacherPasswordFile = new File("TeacherPassword.txt");
            FileOutputStream fos2 = new FileOutputStream(teacherPasswordFile,
                    false);
            PrintWriter pw2 = new PrintWriter(fos2);
            for (int i = 0; i < accountList.size(); i++) {
                pw2.println(passwordList.get(i));
            }
            pw2.close();


        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }


    public static int editStudentInformation(String editUsername, String editPassword, String newUsername, String newPassword) {
        ArrayList<String> accountList = new ArrayList<>();
        ArrayList<String> passwordList = new ArrayList<>();
        int status = 0;
        try {
            File f = new File("StudentAccount.txt");
            FileReader fr = new FileReader(f);
            BufferedReader bfr = new BufferedReader(fr);
            String line = bfr.readLine();
            while (line != null) {
                accountList.add(line);
                line = bfr.readLine();
            }
            bfr.close();

            File f2 = new File("StudentPassword.txt");
            FileReader fr2 = new FileReader(f2);
            BufferedReader bfr2 = new BufferedReader(fr2);
            String line2 = bfr2.readLine();

            while (line2 != null) {
                passwordList.add(line2);
                line2 = bfr2.readLine();
            }
            bfr2.close();

            accountList.set(accountList.indexOf(editUsername), newUsername);
            passwordList.set(passwordList.indexOf(editPassword), newPassword);

            File studentAccountFile = new File("StudentAccount.txt");
            FileOutputStream fos = new FileOutputStream(studentAccountFile,
                    false);
            PrintWriter pw = new PrintWriter(fos);
            for (int i = 0; i < accountList.size(); i++) {
                pw.println(accountList.get(i));
            }
            pw.close();

            File studentPasswordFile = new File("StudentPassword.txt");
            FileOutputStream fos2 = new FileOutputStream(studentPasswordFile,
                    false);
            PrintWriter pw2 = new PrintWriter(fos2);
            for (int i = 0; i < accountList.size(); i++) {
                pw2.println(passwordList.get(i));
            }
            pw2.close();


        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }

    private static void createCourse(BufferedReader newReader, PrintWriter newWriter) {
        try {
            String courseName = newReader.readLine();
            String teacherName = newReader.readLine();
            System.out.println("Working");
            if(courseName.equals("")) {
                return;
            }
            File f1 = new File(teacherName + "_Courses.txt");  //The courses file for the teacher
            PrintWriter pw = new PrintWriter(new FileOutputStream(f1, true));   //Printer writer for the f1
            File f2 = new File(teacherName + "_" + courseName + ".txt");   //File that holds the quizzes for the
            //given course
            f2.createNewFile();
            pw.println(courseName);
            pw.close();
        } catch(IOException e) {

        }
    }

    private static void deleteCourse(BufferedReader newReader, PrintWriter newWriter) {

        try{
            String teacherName = newReader.readLine();
            BufferedReader fileReader = new BufferedReader(new FileReader(teacherName + "_Courses.txt"));
            String line = fileReader.readLine();
            while(line != null) {
                newWriter.write(line);
                newWriter.println();
                newWriter.flush();
                line = fileReader.readLine();
            }
        } catch (IOException e) {

        }
    }

    private static void createQuiz() {

    }

    private static void editQuiz() {

    }

    private static void deleteQuiz() {

    }

    private static void viewSubmission() {

    }

    private static void gradeSubmission() {

    }
}
