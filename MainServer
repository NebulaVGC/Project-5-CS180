import javax.swing.*;
import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

/**
 * CHALLENGE 11
 * <p>
 * Create a button pressing game
 *
 * @author Shih Kuan Chou, CS 180 - L09
 * @version Apr 1, 2022
 */

public class MainServer {

    public static void main(String[] args) {
        checkFile();
        int i = 0;

        ArrayList<String> teacherAccountStore = new ArrayList<>();
        ArrayList<String> teacherPasswordStore = new ArrayList<>();
        ArrayList<String> studentAccountStore = new ArrayList<>();
        ArrayList<String> studentPasswordStore = new ArrayList<>();

        int usernameStatus = 0;

        while (i == 0) {
            int m = 0;

            while (m == 0) {
                try {

                    ServerSocket serverSocket = new ServerSocket(4242);

                    System.out.println("Waiting for the client to connect...");
                    Socket socket = serverSocket.accept();
                    System.out.println("Client connected!");

                    BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    PrintWriter writer = new PrintWriter(socket.getOutputStream());

                    String action = reader.readLine();
                    if (action.equals("create")) {
                        String type = reader.readLine();
                        if (type.equals("teacher")) {
                            String username1;
                            username1 = makeTeacherUsername();
                            if (username1.equals("")) {
                                usernameStatus++;
                                break;
                            } else {
                                usernameStatus = 0;
                            }
                            while (usernameStatus == 0) {
                                try {
                                    if (checkTeacherUsername(username1) == 1) {
                                        String teacherPassword = makePassword();
                                        if (teacherPassword.equals("")) {
                                            break;
                                        }
                                        teacherAccountStore.add(username1);
                                        teacherPasswordStore.add(teacherPassword);

                                        File teacherAccountFile = new File("TeacherAccount.txt");
                                        FileOutputStream fos = new FileOutputStream(teacherAccountFile, false);
                                        PrintWriter pw = new PrintWriter(fos);
                                        for (int j = 0; j < teacherAccountStore.size(); j++) {
                                            pw.println(teacherAccountStore.get(j));
                                        }
                                        File teacherPasswordFile = new File("TeacherPassword.txt");
                                        FileOutputStream fos2 = new FileOutputStream(teacherPasswordFile, false);
                                        PrintWriter pw2 = new PrintWriter(fos2);
                                        for (int j = 0; j < teacherPasswordStore.size(); j++) {
                                            pw2.println(teacherPasswordStore.get(j));
                                        }
                                        pw.close();
                                        pw2.close();
                                        break;
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }

                        } else if (type.equals("student")) {

                            String username1;
                            username1 = makeStudentUsername();
                            if (username1.equals("")) {
                                usernameStatus++;
                                break;
                            } else {
                                usernameStatus = 0;
                            }
                            while (usernameStatus == 0) {
                                try {
                                    if (checkStudentUsername(username1) == 1) {
                                        String studentPassword = makePassword();
                                        if (studentPassword.equals("")) {
                                            break;
                                        }
                                        studentAccountStore.add(username1);
                                        studentPasswordStore.add(studentPassword);

                                        File studentAccountFile = new File("StudentAccount.txt");
                                        FileOutputStream fos = new FileOutputStream(studentAccountFile, false);
                                        PrintWriter pw = new PrintWriter(fos);
                                        for (int j = 0; j < studentAccountStore.size(); j++) {
                                            pw.println(studentAccountStore.get(j));
                                        }
                                        File studentPasswordFile = new File("StudentPassword.txt");
                                        FileOutputStream fos2 = new FileOutputStream(studentPasswordFile, false);
                                        PrintWriter pw2 = new PrintWriter(fos2);
                                        for (int j = 0; j < studentPasswordStore.size(); j++) {
                                            pw2.println(studentPasswordStore.get(j));
                                        }
                                        pw.close();
                                        pw2.close();
                                        break;
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    } else if (action.equals("edit")) {
                        String type = reader.readLine();
                        if (type.equals("teacher")) {
                            usernameStatus = 0;
                            while (usernameStatus == 0) {
                                try {
                                    String editUsername = checkTeacherNameExist();
                                    String editPassword = checkTeacherPasswordExist();

                                    ArrayList<String> accountList = new ArrayList<>();
                                    ArrayList<String> passwordList = new ArrayList<>();

                                    File f = new File("TeacherAccount.txt");
                                    FileReader fr = new FileReader(f);
                                    BufferedReader bfr = new BufferedReader(fr);
                                    String line = bfr.readLine();
                                    usernameStatus = 1;
                                    while (line != null) {
                                        accountList.add(line);
                                        line = bfr.readLine();
                                    }
                                    bfr.close();

                                    File f2 = new File("TeacherPassword.txt");
                                    FileReader fr2 = new FileReader(f2);
                                    BufferedReader bfr2 = new BufferedReader(fr2);
                                    String line2 = bfr2.readLine();

                                    while (line2 != null) {
                                        passwordList.add(line2);
                                        line2 = bfr2.readLine();
                                    }
                                    bfr2.close();

                                    if (passwordList.get(accountList.indexOf(editUsername)).equals(editPassword)) {
                                        String newUsername = makeTeacherUsername();
                                        if (newUsername.equals("")) {
                                            break;
                                        }
                                        String newPassword = makePassword();
                                        if (newPassword.equals("")) {
                                            break;
                                        }

                                        editTeacherInformation(editUsername, editPassword, newUsername, newPassword);
                                        break;

                                    } else {
                                        informationMismatch();
                                        break;
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }


                        } else if (type.equals("student")) {
                            usernameStatus = 0;
                            while (usernameStatus == 0) {
                                try {
                                    String editUsername = checkStudentNameExist();
                                    String editPassword = checkStudentPasswordExist();

                                    ArrayList<String> accountList = new ArrayList<>();
                                    ArrayList<String> passwordList = new ArrayList<>();

                                    File f = new File("StudentAccount.txt");
                                    FileReader fr = new FileReader(f);
                                    BufferedReader bfr = new BufferedReader(fr);
                                    String line = bfr.readLine();
                                    usernameStatus = 1;
                                    while (line != null) {
                                        accountList.add(line);
                                        line = bfr.readLine();
                                    }
                                    bfr.close();

                                    File f2 = new File("StudentPassword.txt");
                                    FileReader fr2 = new FileReader(f2);
                                    BufferedReader bfr2 = new BufferedReader(fr2);
                                    String line2 = bfr2.readLine();

                                    while (line2 != null) {
                                        passwordList.add(line2);
                                        line2 = bfr2.readLine();
                                    }
                                    bfr2.close();

                                    if (passwordList.get(accountList.indexOf(editUsername)).equals(editPassword)) {
                                        String newUsername = makeStudentUsername();
                                        if (newUsername.equals("")) {
                                            break;
                                        }
                                        String newPassword = makePassword();
                                        if (newPassword.equals("")) {
                                            break;
                                        }

                                        editStudentInformation(editUsername, editPassword, newUsername, newPassword);
                                        break;
                                    } else {
                                        informationMismatch();
                                        break;
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    } else if (action.equals("login")) {
                        String type = reader.readLine();
                        if (type.equals("teacher")) {
                            usernameStatus = 0;
                            while (usernameStatus == 0) {
                                try {
                                    String userName = checkTeacherNameExist();
                                    String password = checkTeacherPasswordExist();

                                    ArrayList<String> accountList = new ArrayList<>();
                                    ArrayList<String> passwordList = new ArrayList<>();

                                    File f = new File("TeacherAccount.txt");
                                    FileReader fr = new FileReader(f);
                                    BufferedReader bfr = new BufferedReader(fr);
                                    String line = bfr.readLine();
                                    usernameStatus = 1;
                                    while (line != null) {
                                        accountList.add(line);
                                        line = bfr.readLine();
                                    }
                                    bfr.close();

                                    File f2 = new File("TeacherPassword.txt");
                                    FileReader fr2 = new FileReader(f2);
                                    BufferedReader bfr2 = new BufferedReader(fr2);
                                    String line2 = bfr2.readLine();

                                    while (line2 != null) {
                                        passwordList.add(line2);
                                        line2 = bfr2.readLine();
                                    }
                                    writer.write(userName);
                                    writer.println();
                                    writer.flush();
                                    bfr2.close();

                                    if (passwordList.get(accountList.indexOf(userName)).equals(password)) {

                                        //run teacher
                                        int choice = 0;
                                        while (choice != 8) {
                                            choice = Integer.parseInt(reader.readLine());
                                            if (choice == 1) {
                                                createCourse(reader, writer);
                                            } else if (choice == 2) {
                                                deleteCourse(reader, writer);
                                            } else if (choice == 3) {
                                                createQuiz();
                                            } else if (choice == 4) {
                                                editQuiz();
                                            } else if (choice == 5) {
                                                deleteQuiz();
                                            } else if (choice == 6) {
                                                viewSubmission();
                                            } else if (choice == 7) {
                                                gradeSubmission();
                                            }
                                        }

                                        break;

                                    } else {
                                        informationMismatch();
                                        break;
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }


                        }
                        if (type.equals("student")) {
                            usernameStatus = 0;
                            while (usernameStatus == 0) {
                                try {

                                    String userName = checkStudentNameExist();
                                    String password = checkStudentPasswordExist();

                                    ArrayList<String> accountList = new ArrayList<>();
                                    ArrayList<String> passwordList = new ArrayList<>();

                                    File f = new File("StudentAccount.txt");
                                    FileReader fr = new FileReader(f);
                                    BufferedReader bfr = new BufferedReader(fr);
                                    String line = bfr.readLine();
                                    usernameStatus = 1;
                                    while (line != null) {
                                        accountList.add(line);
                                        line = bfr.readLine();
                                    }
                                    bfr.close();

                                    File f2 = new File("StudentPassword.txt");
                                    FileReader fr2 = new FileReader(f2);
                                    BufferedReader bfr2 = new BufferedReader(fr2);
                                    String line2 = bfr2.readLine();

                                    while (line2 != null) {
                                        passwordList.add(line2);
                                        line2 = bfr2.readLine();
                                    }
                                    writer.write(userName);
                                    writer.println();
                                    writer.flush();
                                    bfr2.close();

                                    if (passwordList.get(accountList.indexOf(userName)).equals(password)) {

                                        //run student
                                        int looping = 0;
                                        String teacher = null;
                                        String username = reader.readLine();
                                        System.out.println(username);
                                        while (looping == 0) {
                                            if (reader.readLine().equals("get teacher")) {
                                                BufferedReader bufferedReader = new BufferedReader(new FileReader("TeacherAccount.txt"));
                                                String newLine = "";
                                                String teacherFileCopy = "";
                                                int n = 0;
                                                while ((newLine = bufferedReader.readLine()) != null) {
                                                    teacherFileCopy = teacherFileCopy + newLine + "\n";
                                                    n++;
                                                }
                                                if (n == 0) {
                                                    writer.write("0");
                                                    writer.println();
                                                    writer.flush();
                                                } else {
                                                    teacherFileCopy = teacherFileCopy.substring(0, teacherFileCopy.length() - 1);
                                                    writer.write(n + "\n" + teacherFileCopy);
                                                    writer.println();
                                                    writer.flush();

                                                    String checkLine = "";
                                                    teacher = reader.readLine();
                                                    try {
                                                        BufferedReader bufferedReader2 = new BufferedReader(new FileReader(teacher + "_Courses.txt"));
                                                        checkLine = bufferedReader2.readLine();
                                                        bufferedReader2.close();
                                                    } catch (Exception e) {
                                                        writer.write("0");
                                                        writer.println();
                                                        writer.flush();
                                                    }
                                                    if (checkLine == null && new File(teacher + "_Courses.txt").exists()) {
                                                        writer.write("0");
                                                        writer.println();
                                                        writer.flush();
                                                    } else if (checkLine != null && new File(teacher + "_Courses.txt").exists()) {
                                                        ArrayList<String> coursesList = new ArrayList<>();
                                                        BufferedReader bufferedReader1 = new BufferedReader(new FileReader(teacher + "_Courses.txt"));
                                                        int coursesCounter = 0;
                                                        while ((newLine = bufferedReader1.readLine()) != null) {
                                                            coursesList.add(newLine);
                                                            coursesCounter++;
                                                        }
                                                        String coursesAmount = String.valueOf(coursesCounter);
                                                        writer.write(coursesAmount);
                                                        writer.println();
                                                        writer.flush();
                                                        for (int l = 0; l < coursesList.size(); l++) {
                                                            writer.write(coursesList.get(l));
                                                            writer.println();
                                                            writer.flush();
                                                        }

                                                        String courseSelection = reader.readLine(); //retrieves course name from client
                                                        checkLine = "";
                                                        try {
                                                            BufferedReader bufferedReader3 = new BufferedReader(new FileReader(teacher + "_" + courseSelection + ".txt"));
                                                            checkLine = bufferedReader3.readLine();
                                                            bufferedReader3.close();
                                                        } catch (Exception e) {
                                                            writer.write("0"); //tells client theres an error
                                                            writer.println();
                                                            writer.flush();
                                                        }
                                                        if (checkLine == null && new File(teacher + "_" + courseSelection + ".txt").exists()) {
                                                            writer.write("0"); //tells client theres an error
                                                            writer.println();
                                                            writer.flush();
                                                        } else if (checkLine != null && new File(teacher + "_" + courseSelection + ".txt").exists()) {
                                                            ArrayList<String> quizList = new ArrayList<>();
                                                            BufferedReader bufferedReader4 = new BufferedReader(new FileReader(teacher + "_" + courseSelection + ".txt"));
                                                            int quizzesCounter = 0;
                                                            newLine = "";
                                                            while ((newLine = bufferedReader4.readLine()) != null) {
                                                                quizList.add(newLine);
                                                                quizzesCounter++;
                                                            }
                                                            String quizAmount = String.valueOf(quizzesCounter);
                                                            writer.write(quizAmount); //writes size of list and list of qizzes
                                                            writer.println();
                                                            writer.flush();

                                                            for (int l = 0; l < coursesList.size(); l++) {
                                                                writer.write(coursesList.get(l));
                                                                writer.println();
                                                                writer.flush();
                                                            }

                                                            String quizSelection = reader.readLine();
                                                            String check = null;
                                                            try {
                                                                BufferedReader bufferedReader5 = new BufferedReader(new FileReader(teacher + "_" + courseSelection + "_" + quizSelection + ".txt"));
                                                                check = bufferedReader5.readLine();
                                                                bufferedReader5.close();
                                                            } catch (Exception e) {
                                                                writer.write("Empty Quiz"); //tells client theres an error
                                                                writer.println();
                                                                writer.flush();
                                                            }

                                                            if (check == null && new File(teacher + "_" + courseSelection + "_" + quizSelection + ".txt").exists()) {
                                                                writer.write("Empty Quiz"); //tells client theres an error
                                                                writer.println();
                                                                writer.flush();
                                                            } else if (check != null && new File(teacher + "_" + courseSelection + "_" + quizSelection + ".txt").exists()) {
                                                                writer.write("Quiz");
                                                                writer.println();
                                                                writer.flush();
                                                                BufferedReader bufferedReader6 = new BufferedReader(new FileReader(teacher + "_" + courseSelection + "_" + quizSelection + ".txt"));
                                                                String shuffleStatus = bufferedReader6.readLine();
                                                                if (shuffleStatus.equals("True")) {
                                                                    MainServer mainServer = new MainServer();
                                                                    mainServer.shuffle(teacher + "_" + courseSelection + "_" + quizSelection + ".txt");
                                                                }
                                                                if (!new File( username + "_" + teacher + "_"
                                                                        + courseSelection + "_" + quizSelection + ".txt").exists()) {
                                                                    writer.write("run quiz");
                                                                    writer.println();
                                                                    writer.flush();

                                                                    int questionCounter = 0;
                                                                    String nextLine = "";
                                                                    ArrayList<String> quizContents = new ArrayList<>();
                                                                    while ((nextLine = bufferedReader6.readLine()) != null) {
                                                                        quizContents.add(nextLine);
                                                                        questionCounter++;
                                                                    }
                                                                    questionCounter = questionCounter/5;
                                                                    writer.write(questionCounter);
                                                                    writer.println();
                                                                    writer.flush();
                                                                    writer.write(shuffleStatus);
                                                                    writer.println();
                                                                    writer.flush();

                                                                    for (int l = 0; l < quizContents.size(); l++) {
                                                                        writer.write(quizContents.get(l));
                                                                        writer.println();
                                                                        writer.flush();
                                                                    }
                                                                    int quizSize = Integer.parseInt(reader.readLine());
                                                                    String completeQuizString = "";
                                                                    for (int l = 0; l < quizSize; l++) {
                                                                        completeQuizString = completeQuizString + reader.readLine() + "\n";
                                                                    }
                                                                    completeQuizString = completeQuizString.substring(0, completeQuizString.length()-1);
                                                                    File file = new File(username + "_" + teacher + "_" + courseSelection + "_" + quizSelection + ".txt");
                                                                    BufferedWriter bw = new BufferedWriter(new FileWriter(file));
                                                                    bw.write(completeQuizString);
                                                                    bw.close();

                                                                } else {
                                                                    writer.write("dont run");
                                                                    writer.println();
                                                                    writer.flush();
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                            }
                                        }
                                        break;

                                    } else {
                                        informationMismatch();
                                        break;
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    }
                } catch (IOException e) {
                    //e.printStackTrace();
                }
            }
        }
    }


    private static void checkFile() {
        File tAccount = new File("TeacherAccount.txt");
        try {
            if (tAccount.exists()) {

            } else {
                tAccount.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        File tPassword = new File("TeacherPassword.txt");
        try {
            if (tPassword.exists()) {

            } else {
                tPassword.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        File sAccount = new File("StudentAccount.txt");
        try {
            if (sAccount.exists()) {

            } else {
                sAccount.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        File sPassword = new File("StudentPassword.txt");
        try {
            if (sPassword.exists()) {

            } else {
                sPassword.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static int editTeacherInformation(String editUsername, String editPassword, String newUsername, String newPassword) {
        ArrayList<String> accountList = new ArrayList<>();
        ArrayList<String> passwordList = new ArrayList<>();
        int status = 0;
        try {
            File f = new File("TeacherAccount.txt");
            FileReader fr = new FileReader(f);
            BufferedReader bfr = new BufferedReader(fr);
            String line = bfr.readLine();
            while (line != null) {
                accountList.add(line);
                line = bfr.readLine();
            }
            bfr.close();

            File f2 = new File("TeacherPassword.txt");
            FileReader fr2 = new FileReader(f2);
            BufferedReader bfr2 = new BufferedReader(fr2);
            String line2 = bfr2.readLine();

            while (line2 != null) {
                passwordList.add(line2);
                line2 = bfr2.readLine();
            }
            bfr2.close();

            accountList.set(accountList.indexOf(editUsername), newUsername);
            passwordList.set(passwordList.indexOf(editPassword), newPassword);

            File teacherAccountFile = new File("TeacherAccount.txt");
            FileOutputStream fos = new FileOutputStream(teacherAccountFile,
                    false);
            PrintWriter pw = new PrintWriter(fos);
            for (int i = 0; i < accountList.size(); i++) {
                pw.println(accountList.get(i));
            }
            pw.close();

            File teacherPasswordFile = new File("TeacherPassword.txt");
            FileOutputStream fos2 = new FileOutputStream(teacherPasswordFile,
                    false);
            PrintWriter pw2 = new PrintWriter(fos2);
            for (int i = 0; i < accountList.size(); i++) {
                pw2.println(passwordList.get(i));
            }
            pw2.close();


        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }


    public static int editStudentInformation(String editUsername, String editPassword, String newUsername, String newPassword) {
        ArrayList<String> accountList = new ArrayList<>();
        ArrayList<String> passwordList = new ArrayList<>();
        int status = 0;
        try {
            File f = new File("StudentAccount.txt");
            FileReader fr = new FileReader(f);
            BufferedReader bfr = new BufferedReader(fr);
            String line = bfr.readLine();
            while (line != null) {
                accountList.add(line);
                line = bfr.readLine();
            }
            bfr.close();

            File f2 = new File("StudentPassword.txt");
            FileReader fr2 = new FileReader(f2);
            BufferedReader bfr2 = new BufferedReader(fr2);
            String line2 = bfr2.readLine();

            while (line2 != null) {
                passwordList.add(line2);
                line2 = bfr2.readLine();
            }
            bfr2.close();

            accountList.set(accountList.indexOf(editUsername), newUsername);
            passwordList.set(passwordList.indexOf(editPassword), newPassword);

            File studentAccountFile = new File("StudentAccount.txt");
            FileOutputStream fos = new FileOutputStream(studentAccountFile,
                    false);
            PrintWriter pw = new PrintWriter(fos);
            for (int i = 0; i < accountList.size(); i++) {
                pw.println(accountList.get(i));
            }
            pw.close();

            File studentPasswordFile = new File("StudentPassword.txt");
            FileOutputStream fos2 = new FileOutputStream(studentPasswordFile,
                    false);
            PrintWriter pw2 = new PrintWriter(fos2);
            for (int i = 0; i < accountList.size(); i++) {
                pw2.println(passwordList.get(i));
            }
            pw2.close();


        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }

    private static void createCourse(BufferedReader newReader, PrintWriter newWriter) {
        try {
            String courseName = newReader.readLine();
            String teacherName = newReader.readLine();
            System.out.println("Working");
            if (courseName.equals("")) {
                return;
            }
            File f1 = new File(teacherName + "_Courses.txt");  //The courses file for the teacher
            PrintWriter pw = new PrintWriter(new FileOutputStream(f1, true));   //Printer writer for the f1
            File f2 = new File(teacherName + "_" + courseName + ".txt");   //File that holds the quizzes for the
            //given course
            f2.createNewFile();
            pw.println(courseName);
            pw.close();
        } catch (IOException e) {

        }
    }

    private static void deleteCourse(BufferedReader newReader, PrintWriter newWriter) {

        try {
            String teacherName = newReader.readLine();
            BufferedReader fileReader = new BufferedReader(new FileReader(teacherName + "_Courses.txt"));
            String line = fileReader.readLine();
            while (line != null) {
                newWriter.write(line);
                newWriter.println();
                newWriter.flush();
                line = fileReader.readLine();
            }
            newWriter.write("");
            newWriter.println();
            newWriter.flush();
            fileReader.close();

            String courseDeleted = newReader.readLine();
            File f = new File(teacherName + "_Courses.txt");   //File that holds the courses for the teacher
            ArrayList<String> list = new ArrayList<>();
            try {
                BufferedReader bfr = new BufferedReader(new FileReader(f));  //Buffered reader for the courses file
                line = bfr.readLine();   //Reads the line in the reader
                while (line != null) {
                    if (!line.equals(courseDeleted)) {
                        list.add(line);
                        line = bfr.readLine();
                    } else {
                        line = bfr.readLine();
                    }
                }
                BufferedReader bfr2 = new BufferedReader(new FileReader(teacherName + "_" + courseDeleted + ".txt"));
                line = bfr2.readLine();
                while (line != null) {
                    File quizFile = new File(teacherName + "_" + courseDeleted + "_" + line + ".txt");
                    quizFile.delete();
                    line = bfr2.readLine();
                }

                PrintWriter pw = new PrintWriter(new FileOutputStream(f));  //Print writer that will go over the courses
                //file and rewrite the file without the given course
                for (int i = 0; i < list.size(); i++) {
                    pw.println(list.get(i));
                }

                pw.close();
                bfr.close();
                bfr2.close();

            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            File f3 = new File(teacherName + "_" + courseDeleted + ".txt");  //File that holds the quizzes for the course
            f3.delete();

        } catch (IOException e) {

        }
    }

    private static void createQuiz() {

    }

    private static void editQuiz() {

    }

    private static void deleteQuiz() {

    }

    private static void viewSubmission() {

    }

    private static void gradeSubmission() {

    }

    public void shuffle(String filename) throws IOException {
        //Shuffles the question order and the answer order of the quiz file
        ArrayList<String> questions = new ArrayList<>();   //array that stores full questions with answers attached
        File f = new File(filename);
        BufferedReader br = new BufferedReader(new FileReader(f));
        BufferedReader bfr = new BufferedReader(new FileReader(filename));
        String line = "";       //initiates a string
        int numq = 1;
        String shuffleStatus = bfr.readLine();
        while (bfr.readLine() != null) {
            numq++;           //counts the number of lines in file
        }
        bfr.close();
        numq = numq / 5;   //counts number of questions
        int lineNum = 1;
        int mult = 0;
        br.readLine();
        while (line != null) {
            line = br.readLine();
            ++lineNum;
            if (lineNum == (2 + 5 * mult) && mult <= numq && line != null) {
                mult++;
                String q = "";
                String ans = "";
                q = line + "\n";
                lineNum++;
                q += br.readLine() + "\n";
                lineNum++;
                q += br.readLine() + "\n";
                lineNum++;
                q += br.readLine() + "\n";
                lineNum++;
                q += br.readLine() + "\n";
                questions.add(q);
            }
        }
        br.close();
        Collections.shuffle(questions);  //shuffles question order

        ArrayList<String> newQuestions = new ArrayList<>(); //list that new shuffled answers will be stored in
        for (int i = 0; i < questions.size(); i++) {
            String wholeQuestion = questions.get(i); //stores one question
            String q = wholeQuestion.substring(0, wholeQuestion.indexOf("\n")); //question line
            String answerOptions = wholeQuestion.substring(wholeQuestion.indexOf("\n"));
            answerOptions = answerOptions.substring(1);
            String a = answerOptions.substring(0, answerOptions.indexOf("\n"));
            String a1 = a.substring(3);   //answer option A without "A. "
            answerOptions = answerOptions.substring(answerOptions.indexOf("\n"));
            answerOptions = answerOptions.substring(1);
            String b = answerOptions.substring(0, answerOptions.indexOf("\n"));
            String b1 = b.substring(3); //answer option B without "B. "
            answerOptions = answerOptions.substring(answerOptions.indexOf("\n"));
            answerOptions = answerOptions.substring(1);
            String c = answerOptions.substring(0, answerOptions.indexOf("\n"));
            String c1 = c.substring(3);  //answer option C without "C. "
            answerOptions = answerOptions.substring(answerOptions.indexOf("\n"));
            answerOptions = answerOptions.substring(1);
            String d = answerOptions.substring(0, answerOptions.indexOf("\n"));
            String d1 = d.substring(3);  //answer option D without "D. "
            ArrayList<String> answerHolder = new ArrayList<>(); //holds answer options
            answerHolder.add(a1);
            answerHolder.add(b1);
            answerHolder.add(c1);
            answerHolder.add(d1);
            Collections.shuffle(answerHolder); //shuffles answer options
            String answerI = "";
            for (int j = 0; j < 4; j++) { //attaches an "A. ", "B. ", "C. ", or "D. " in front of answer option
                if (j == 0) {
                    answerI += ("\n" + "A. " + answerHolder.get(j));
                } else if (j == 1) {
                    answerI += ("\nB. " + answerHolder.get(j));
                } else if (j == 2) {
                    answerI += ("\nC. " + answerHolder.get(j));
                } else if (j == 3) {
                    answerI += ("\nD. " + answerHolder.get(j));
                }
            }

            String total = q + answerI;
            newQuestions.add(total);  //string of answer options
        }
        BufferedWriter bw = new BufferedWriter(new FileWriter(filename));
        //new buffered writer to write back to quiz file
        bw.write(shuffleStatus); //writes "True" at top of file
        bw.write("\n");
        for (int k = 0; k < newQuestions.size(); k++) { //writes full shuffled quiz back to file
            if (k < newQuestions.size() - 1) {
                bw.write(newQuestions.get(k));
                bw.write("\n");
            } else {
                bw.write(newQuestions.get(k));
            }
        }
        bw.close();
    }


    public static String makeTeacherUsername() {
        String userName = null;
        int i = 0;
        while (i == 0) {
            userName = JOptionPane.showInputDialog(null, "Please enter your desired username",
                    "Make username", JOptionPane.QUESTION_MESSAGE);
            //if (Integer.parseInt(userName) == JOptionPane.CLOSED_OPTION || Integer.parseInt(userName) == JOptionPane.CANCEL_OPTION) {
            //  return "exit";
            //}
            if (userName == null) {
                return "";
            } else if (userName.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Username cannot be empty!", "Make username",
                        JOptionPane.ERROR_MESSAGE);
            } else if (userName.contains(" ")) {
                JOptionPane.showMessageDialog(null, "Username cannot contain space!", "Make username",
                        JOptionPane.ERROR_MESSAGE);
            }  else if (checkTeacherUsername(userName) != 1) {
                JOptionPane.showMessageDialog(null, "Username already exist!", "Username error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                i++;
            }
        }
        return userName;
    }

    public static int checkTeacherUsername(String username1) {
        String tUsername;
        try {
            File f = new File("TeacherAccount.txt");
            FileReader fr = new FileReader(f);
            BufferedReader bfr = new BufferedReader(fr);
            String line = bfr.readLine();
            int usernameStatus = 1;

            while (line != null) { //checks if username already exists
                if (username1.equals(line)) {
                    return 2;
                }
                line = bfr.readLine();
            }
            return 1;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return 1;
    }

    public static String makePassword() {
        String password = null;
        int i = 0;
        while (i == 0) {
            password = JOptionPane.showInputDialog(null, "Please enter your desired password",
                    "Make username", JOptionPane.QUESTION_MESSAGE);
            if (password == null) {
                return "";
            } else if (password.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Password cannot be empty!", "Make password",
                        JOptionPane.ERROR_MESSAGE);
            } else if (password.contains(" ")) {
                JOptionPane.showMessageDialog(null, "Password cannot contain space!", "Make password",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                i++;
            }
        }
        return password;
    }

    public static String makeStudentUsername() {
        String userName = null;
        int i = 0;
        while (i == 0) {
            userName = JOptionPane.showInputDialog(null, "Please enter your desired username",
                    "Make username", JOptionPane.QUESTION_MESSAGE);
            //if (Integer.parseInt(userName) == JOptionPane.CLOSED_OPTION || Integer.parseInt(userName) == JOptionPane.CANCEL_OPTION) {
            //  return "exit";
            //}
            if (userName == null) {
                return "";
            } else if (userName.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Username cannot be empty!", "Make username",
                        JOptionPane.ERROR_MESSAGE);
            } else if (userName.contains(" ")) {
                JOptionPane.showMessageDialog(null, "Username cannot contain space!", "Make username",
                        JOptionPane.ERROR_MESSAGE);
            } else if (checkStudentUsername(userName) != 1) {
                JOptionPane.showMessageDialog(null, "Username already exist!", "Username error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                i++;
            }
        }
        return userName;
    }

    public static int checkStudentUsername(String username1) {
        String tUsername;
        try {
            File f = new File("StudentAccount.txt");
            FileReader fr = new FileReader(f);
            BufferedReader bfr = new BufferedReader(fr);
            String line = bfr.readLine();
            int usernameStatus = 1;

            while (line != null) { //checks if username already exists
                if (username1.equals(line)) {
                    return 2;
                }
                line = bfr.readLine();
            }
            return 1;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return 1;
    }

    public static String checkTeacherNameExist() {
        String userName = null;
        int i = 0;
        while (i == 0) {
            userName = JOptionPane.showInputDialog(null, "Please enter your username",
                    "Verify username", JOptionPane.QUESTION_MESSAGE);
            if (userName == null) {
                return "";
            } else if (userName.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Username cannot be empty!", "Make username",
                        JOptionPane.ERROR_MESSAGE);
            } else if (userName.contains(" ")) {
                JOptionPane.showMessageDialog(null, "Username cannot contain space!", "Make username",
                        JOptionPane.ERROR_MESSAGE);
            } else if (checkTeacherUsername(userName) != 2) {
                JOptionPane.showMessageDialog(null, "Username does not exist!", "Username error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                i++;
            }
        }
        return userName;
    }

    public static String checkTeacherPasswordExist() {
        String userName = null;
        int i = 0;
        while (i == 0) {
            userName = JOptionPane.showInputDialog(null, "Please enter your password",
                    "Verify password", JOptionPane.QUESTION_MESSAGE);
            if (userName == null) {
                return "";
            } else if (userName.isEmpty()) {
                JOptionPane.showMessageDialog(null, "password cannot be empty!", "Make password",
                        JOptionPane.ERROR_MESSAGE);
            } else if (userName.contains(" ")) {
                JOptionPane.showMessageDialog(null, "password cannot contain space!", "Make password",
                        JOptionPane.ERROR_MESSAGE);
            } else if (checkTeacherPassword(userName) != 2) {
                JOptionPane.showMessageDialog(null, "password does not match!", "password error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                i++;
            }
        }
        return userName;
    }

    public static String checkStudentNameExist() {
        String userName = null;
        int i = 0;
        while (i == 0) {
            userName = JOptionPane.showInputDialog(null, "Please enter your username",
                    "Verify username", JOptionPane.QUESTION_MESSAGE);
            if (userName == null) {
                return "";
            } else if (userName.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Username cannot be empty!", "Make username",
                        JOptionPane.ERROR_MESSAGE);
            } else if (userName.contains(" ")) {
                JOptionPane.showMessageDialog(null, "Username cannot contain space!", "Make username",
                        JOptionPane.ERROR_MESSAGE);
            } else if (checkStudentUsername(userName) != 2) {
                JOptionPane.showMessageDialog(null, "Username does not exist!", "Username error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                i++;
            }
        }
        return userName;
    }

    public static String checkStudentPasswordExist() {
        String userName = null;
        int i = 0;
        while (i == 0) {
            userName = JOptionPane.showInputDialog(null, "Please enter your password",
                    "Verify password", JOptionPane.QUESTION_MESSAGE);
            if (userName == null) {
                return "";
            } else if (userName.isEmpty()) {
                JOptionPane.showMessageDialog(null, "password cannot be empty!", "Make password",
                        JOptionPane.ERROR_MESSAGE);
            } else if (userName.contains(" ")) {
                JOptionPane.showMessageDialog(null, "password cannot contain space!", "Make password",
                        JOptionPane.ERROR_MESSAGE);
            } else if (checkStudentPassword(userName) != 2) {
                JOptionPane.showMessageDialog(null, "password does not match!", "password error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                i++;
            }
        }
        return userName;
    }

    public static int checkTeacherPassword(String password1) {
        String tUsername;
        try {
            File f = new File("TeacherPassword.txt");
            FileReader fr = new FileReader(f);
            BufferedReader bfr = new BufferedReader(fr);
            String line = bfr.readLine();
            int usernameStatus = 1;

            while (line != null) { //checks if username already exists
                if (password1.equals(line)) {
                    return 2;
                }
                line = bfr.readLine();
            }
            return 1;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return 1;
    }


    public static int checkStudentPassword(String password1) {
        String tUsername;
        try {
            File f = new File("StudentPassword.txt");
            FileReader fr = new FileReader(f);
            BufferedReader bfr = new BufferedReader(fr);
            String line = bfr.readLine();
            int usernameStatus = 1;

            while (line != null) { //checks if username already exists
                if (password1.equals(line)) {
                    return 2;
                }
                line = bfr.readLine();
            }
            return 1;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return 1;
    }

    public static void informationMismatch() {
        JOptionPane.showMessageDialog(null, "Your information did not match with our record", "Button Game",
                JOptionPane.ERROR_MESSAGE);
    }

}
